/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        Queue<TreeNode> q = new LinkedList<TreeNode>();
        List<List<Integer>> ans = new ArrayList<List<Integer>>();

        if (root == null) {
            return ans;
        }

        q.offer(root);

        while (!q.isEmpty()) {
            int nodes = q.size();
            ArrayList<Integer> currLevel = new ArrayList<>();
            
            for (int i = 0; i < nodes; i++) {
                TreeNode currNode = q.poll();
                if (currNode.left != null) {
                    q.offer(currNode.left);
                }
                if (currNode.right != null) {
                    q.offer(currNode.right);
                }
                
                currLevel.add(currNode.val);
            }
            ans.add(currLevel);
        }
         return ans;
    }
}
