class Solution {
    public List<List<Integer>> threeSum(int[] nums) {
        Arrays.sort(nums);
        List<List<Integer>> ret = new ArrayList<>();

        for (int x = 0; x < nums.length; x++) {
            for (int y = x+1, z = nums.length-1; y < z; y++) {
                while (y < z) {
                    int curSum = sum(x, y, z, nums);
                    if (curSum == 0) {
                        ret.add(Arrays.asList(nums[x], nums[y], nums[z]));
                        while (y < z && nums[y] == nums[y+1]) {
                            y++;
                        }
                        while (y < z && nums[z] == nums[z-1]) {
                            z--;
                        }
                        y++;
                        z--;
                    } else if (curSum > 0) {
                        z--;
                    } else {
                        y++;
                    }
                }
            }
            // set x to next unique element
            while (x < nums.length - 1 && nums[x] == nums[x+1]) {
                x++;
            }
        }
        return ret;

        
    }

    private int sum(int x, int y, int z, int[] nums) {
        return nums[x] + nums[y] + nums[z];
    }
}


// slow solution
// class Solution {
//     public List<List<Integer>> threeSum(int[] nums) {
//         int x, y, z;
//         Arrays.sort(nums);
//         HashSet<List<Integer>> set = new HashSet<>();

//         for (x = 0; x < nums.length; x++) {
//             for (y = x+1, z = nums.length-1; y < z; y++) {
//                 while (y < z && sum(x, y, z, nums) > 0) {
//                     z--;
//                 }
//                 if (y < z && sum(x, y, z, nums) == 0) {
//                     set.add(Arrays.asList(nums[x], nums[y], nums[z]));
//                 }
//             }
//         }
//         List<List<Integer>> ret = new ArrayList<>(set);
//         return ret;

        
//     }

//     private int sum(int x, int y, int z, int[] nums) {
//         return nums[x] + nums[y] + nums[z];
//     }
// }
