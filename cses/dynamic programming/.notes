A great resource is the cses dp editorial blog on codeforces. 
1. Dice Combinations -- Simple dp problem. Initialize dp[num] array with dp[0] = 1 (1 way to roll 0). Then, use 2 nested for-loops to build the dp array up to 
n by going through all rolls from 1 to 6 for each number. If the current number i minus the current roll j is at least zero, then set dp[i] += dp[i-j]. This is 
because, for instance, if i = 4, if you roll a 2, since 4-2 = 2, there are dp[2] ways to roll the 2 needed to create 4. Do this for every possible dice roll, and since
you are building the dp array from 0 to n, there won't be any problems.

2. Minimizing Coins -- Input variables and all coin values into a coins(n) vector. Make your long long dp vector of size x+1 since you want dp[x] and you initialize 
dp[0] to 0 (for value [0], the minimum number of coins needed to make it is 0). Set every value of dp to INF besides dp[0]. Then, loop from i=1 to target value, 
and for each value i, loop through the coins array and set dp[i] to the minimum value of dp[i] and dp[i-c] if i-c is at least 0. At the end, if dp[x] = INF, print -1, 
else just print dp[x].

3. Coin Combinations I -- This is similar to the last problem, but don't set every value of dp to INF, and dp[0] = 1, because there are 1 distinct ways to create 
value 0. Do the same loop, but as long as i-c >= 0, just do dp[i] += dp[i-c];

4. Coin Combinations II -- The last problem but you have to count the distinct ordered number of ways. Surprisingly, you can actually do this just by switching
the order of the two loops -- that way it ensures it prints distinct solutions with the coins in increasing order. 

5. Removing Digits -- Create a dp vector of size 10^6 + 1 (aka max N + 1) and initalize dp[0] = 0: you need 0 steps to make [0] equal to zero. Then, iterate from
i = 1 to n inclusive, first setting dp[i] to INF, then make a value i2 = i. This is confusing to understand at first, but it comes really clear once you remember
that you are using dynamic programming. Essentially, you use i2 to go through every digit of the current i, and you set dp[i] to the minimum value between
dp[i] and dp[i-(i2%10)] + 1. Remember, i2%10 is just the first digit of i2, and i - that value is the number you'd get from subtracting that digit, then you add 1
because subtracting that value in the first place is a step in itself. Then, you do i2 /= 10 to move onto the next digit, and do this for every digit of i using i2
to find the minimum value. This works because you are building the dp vector from 0 to n, so there will always be a value for dp[i-(i2%10)].

6. Grid Paths -- Create an array of strings to represent the board and input it in. Create a ll dp array of boundaries [1000][1000] (max grid size) to represent
coordinates of the grid. Set dp[0][0] = 1 because there is only one way to get to 0, 0. Then, iterate through the entire board using 2 nested for loops i and j
from 0 to n. If board[i][j] = '*', this is a trap, and you can't move there, so set dp[i][j] to 0 there. Otherwise, do dp[i][j] += dp[i-1][j] (moving from square
above) if i > 0 (not on top of grid) and += dp[i][j-1] (moving from square to the left) if j > 0 (not on right edge of grid). Do modulo operation each time 
and output answer as dp[n-1][n-1].

7. Book Shop -- This is a 0-1 knapsack problem, a common type of dp problem. First, input variables and create vectors for prices and pages of books. Make a dp
vector of size 100001 (aka max X + 1). This is a cool way of solving this problem showcased in the cses handbook on page 73 using only a 1d array: other 
solutions use a 2d array for dp. Basically, it iterates using 2 nested for loops, the outer going from i=0 to n-1, and for each i, it sets a value j equal to
the max spending price x and decrements j each iteration as long as j is at least the price of book i. Then, it sets dp[j] (j = price) to the max of dp[j]
and dp[j-prices[i]] + pages[i]. Essentially, whether you don't buy the book (keep dp[j]), or whether you buy the book (the pages of dp[j-price of book i] plus 
the pages gained by buying book i. For each value i it updates the array from left to right. This may be somewhat hard to understand without visualizing it.

8. Array Description -- Input variables, array into values vector and create a 2d dp vector of size [n][m+1], setting each value to 0. The dp array works like
dp[i][j] = number of ways to fill array up to index i if the value at that index is j. For the first number in the array: if it is 0, then it can be any number, 
so dp[0][0] to dp[0][m] should all be set to one. Otherwise, if the value is already set, then dp[0][values[0]] = 1, since there's only one possibility. 
Then, iterate through the rest of the array values, and if the value is 0, then from j = 1 to j = m, increment dp[i][j] by dp[i-1][j] (the index before if it's
the same number), dp[i-1][j-1], and dp[i-1][j+1] (if j-1 >= 1 and j+1 <= m). Remember -- we can only have adjacent values, so we only looks at values that 
are either 1 below, 1 above, or equal to j. Otherwise, if values[j] != 0, we find the value and increment dp[i][values[i]] by values[i] minus 1, plus 1, and equal
(if it fits constraints). No for loop is needed since the value is locked in. Then, we set our ll ans and iterate from int i = 1 to i = m inclusive and increment
answer by dp[n-1][i] because the last value of our array could be anything if there are enough zeros in the input array. Then, output answer. Use %= MOD throughout
the code, as is the same for many of these problems.

9. Counting Towers -- This is a pretty tricky problem with a cool solution, but that solution almost definitely needs a visualization. It involves 
using the base case of having a 2x2 square and how many different arrangements you can have with that (8). Video link: https://www.youtube.com/watch?v=MxhA0bY31wM

10. Edit Distance -- Classic problem. Input two string and create variables for the size of each of them. Use a 2d dp vector of size [n+1][m+1], setting 
every value to INF (we are minimzing edit distance). dp[i][j] represents minimum moves to make a[0->i] into b[0->j]. Set dp[0][0] = 0. Use 2 nested for loops
using i from [0, size of str1] (inclusive) and j from [0, size of str2]. For each operation, we can either: delete the last character of str1, which is modeled by
dp[i][j] = min(dp[i][j], dp[i-1][j] +1); add a character at the end of str1, which is modeled by dp[i][j] = min(dp[i][j], dp[i][j-1] +1); or modify the last value
of str1 to match str2. We can do this by seeing whether str1[i-1] == str2[j-1]. If it is, this costs 0 operations, and otherwise to change it would cost 1. 
Then, we set dp[i][j] to min of dp[i][j] and dp[i-1][j-1] + 0 or 1 dependent on condition stated in last sentence. The result is found by dp[n][m], where n
is the size of str1 and m is the size of str2.
 
11. Rectangle Cutting -- Pretty simple problem once you draw it out. Use a 2d vector of size [a+1][b+1]. Loop through all values using 2 nested for loops, and 
if i == j, then you already have a square, so you set dp[i][j] = 0, otherwise set it to infinity. If you set it to infinity, then use two for loops using a 
variable k that iterates through i and j separately to model cutting the rectangle of that size at position i or j. Each time, set dp[i][j] to the minimum of 
either dp[k][j] + dp[i-k][j] + 1 for the first loop, or dp[i][k]+dp[i][j-k]+1 for the second for loop. The idea is that if you make a cut at position k horizontally
(on side i), you will create two new rectangles of size dp[k][j] and dp[i-k][j], and add one because the cut itself is a move. Do the same 
for cutting vertically (on side j). Print dp[a][b] as your answer. 
 
12. Money Sums -- This is another 0-1 knapsack dp problem. Again, we can administer the solution on page 73 of the CSES handbook. So, we use a 1d dp array of size
max_sum + 1, and max_sum is calculated by n* 1000 (1000 is the max value of x). Other solutions may use a 2d dp array. Initially, we set all values of the dp
vector to 0, and initially set dp[0] to 1 as our base case (you can make sum zero -- the format is dp[num] = 1 if you can make the sum, and zero 
otherwise). To fill the dp vector, you iterate through all of the coins and for each coin, use a variable j starting at max_sum that decreases as long as it is 
greater than or equal to coins[i]. Essentially, you want to set dp[j] to a something other than zero dependent on if it's already been found dp[j] 
OR (||) seeing if dp[j-coins[i]] has been found, meaning that you can create sum dp[j] by using that coin. Then, create a vector ans, and iterate through 
all possible sums from 1 to max_sum, and if dp[i] is greater than zero, then you can make that sum, so you add it to your answer vector. Then, you output
the size of your answer vector and afterwards print every value in it.
 
13. Removal Game -- 
 
18. Counting Tilings -- Probably the hardest problem in this set. Very hard to wrap your head around, especially if you aren't super intuitive about bitwise operations.
See the comments in the actual code for more information (not the large paragraph before the code).
Think about the constraints - n is small and m is large. We can use this for optimization. This problem requires bitmasking. We can build a solution by constructing 
columns one by one. Each block of a column can either be filled or unfilled. We can model all of these possible combinations by using a bitmask. Since each 
column is of height n, there are 2^n possible combinations for each column (subsets). It is important to know the state of the previous column for each one we are 
building so we can know what blocks are already filled (like in a horizontal tile). We initialize our 2d dp array with [1001][1<<11]. The second dimension
is the maximum possible combinations of each column 2^10 since n is at most 10, plus one because that is how the code checks if a mask is valid.
First, we read in the data and initialize our dp array with the values being -1. Then we call our solve functions with initial column 1 and mask of 0 
(because the current first column is empty). The first two if statement blocks are just for our base case for recursion and incorporating dynamic programming. 
Then, we use the gen next masks function to generate all possible masks using the current mask and places them in a vector, then it iterates through that 
vector and increments answer by calling solve of the next column using the current next_mask. It does this until it's gone through every possible combination and 
returns the answer. The gen next masks function uses set bits to determine whether it can't place a tile (already occupied) for each block of a column, whether a 
mask has been created (pushes back onto vector), and if it can place a vertical or horizontal tile. 
***In the fourth block, the  next_mask + (1 << i) call will make the block at row i in next_mask one to represent the other half of the horizontal block.*** 
This is somewhat confusing, but you have to realize the difference between current_mask, the mask we're currently on, and next_mask, the mask(s) we're
building to put into our vector and use to form other masks. Also, the condition in our base case will ensure that no horizontal blocks are placed past the edges.
